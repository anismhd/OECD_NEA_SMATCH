"""
Revision Sheet
	R0 -
	R1 - 
	R2 - 
	R3 - Remove Gap in SASSI NODE numbering
		 Node numbering for DUMMY_NODE_X, Y, Z and XYZ in writing file was wrong
		 Material maping was wrong. Earlier i, now changed to i+1
	R10  The SCLIST value was goint SASSI with unit of N/m, now modified to kN/m
	R11 The laterial stiffness values were back calculated from modal characteristics
	R12 The vertical stiffness values jacked up by 10000
	R13 Rigid spring constrains has increased from 1E12 to 1E20
	R15 Rigid spring constrains has reduced from 1E20 to 1E15 - E20 was giving stability issue
		and vertical spring again jacked up by 1000 -- So total 1E6 increase
    R16 
"""
import numpy as np
import pandas as pd
import pickle

from aerb_unv_reader import UNV
from material_prop_reader import material_section_read
from PlaneClass import PlainGeometry
from time import gmtime, strftime

DOF_MAP = {'DX':1, 'DY':2, 'DZ':3}

def extractGroupEdges(NODES,ELEMENTS,elGroups,connecting_node):
	EDGES = []
	closest_nodes = 1
	for eid in elGroups:
		nodes = ELEMENTS[eid]['connectivity']
		for i,nn in enumerate(nodes):
			if (np.linalg.norm(np.array(NODES[nn]) - np.array(NODES[connecting_node]))) < \
				(np.linalg.norm(np.array(NODES[closest_nodes]) - np.array(NODES[connecting_node]))):
				closest_nodes = nn
			edg = [min([nodes[i],nodes[(i+1)%len(nodes)]]),\
				max([nodes[i],nodes[(i+1)%len(nodes)]])]
			if not(edg in EDGES):
				EDGES.append(edg)
	return EDGES, nn

def find_node4beam_orientation(NODES,node1,node2,abaqus_n1):
	width_dir, depth_dir = find_width_depth_dir_beam(\
		NODES[node1],NODES[node2],abaqus_n1)
	PLAIN = PlainGeometry(NODES[node1],width_dir)
	PLAIN2 = PlainGeometry(NODES[node1],depth_dir)
	for i,node in NODES.items():
		if i in FreeNodes:
			continue
		if PLAIN(node) and not(PLAIN2(node)):
			return NODE_A2S[i]
	return None
def find_width_depth_dir_beam(node1,node2,abaqus_n1):
	vv = (np.array(node2) - np.array(node1))/np.linalg.norm(\
		np.array(node2) - np.array(node1))
	depth_dir = np.cross(vv,np.array(abaqus_n1))
	depth_dir = depth_dir/np.linalg.norm(depth_dir)
	width_dir = np.cross(vv,depth_dir)
	width_dir = width_dir/np.linalg.norm(width_dir)
	return width_dir, depth_dir


ABAQUS_MODEL = True
SASSI_MODEL = True
SASSI_MODEL_NAME = 'CruasNPP_S2R1'

try:
    import AbaqusLibraries as AL
except:
    ABAQUS_MODEL = False

###### BASE ISOLATOR VALUES
STIFF_X = 23.154909136914927E6#4.45E6
STIFF_Y = 23.154909136914927E6#4.45E6
STIFF_Z = 1025.6332960812308E6#134.9E6
BaseIsolator_Damp = 0.10
Structural_Damp = 0.05
# Rigid Link Sspring Characteristics
RIGIDK = 1E12

DESCLAIMER = """
* This files/figure is generated by the program named ASAI(ACS SASSI ABAQUS INTEGRATION), written by Anis Mohammed Venasseri.
* The author is not responsible for the content or output generated by this program.
* It is advised to check all the input and out files thoroughly before producing any conclusion/results.
* For any further query contact master.
*\t\t Anis Mohammed Vengasseri
*\t\t Scientific Officer
*\t\t Atomic Energy Regulatory Board
*\t\t anis.mhd@gmail.com, amv@aerb.gov.in
*\t\t https://github.com/anismhd
"""

############################################################################
# Base Isolator Spring Stiffness 
BaseIsolator = {}
BaseIsolator['R_C_RBB'] = (4*STIFF_X,4*STIFF_Y,0.1E+06,0.1E+06,0.1E+06,0.1E+06,)
BaseIsolator['R_C_BD6'] = (4*STIFF_X,4*STIFF_Y,0.1E+06,0.1E+06,0.1E+06,0.1E+06,)
BaseIsolator['R_C_BD5'] = (4*STIFF_X,4*STIFF_Y,0.1E+06,0.1E+06,0.1E+06,0.1E+06,)
BaseIsolator['R_C_BD2'] = (4*STIFF_X,4*STIFF_Y,0.1E+06,0.1E+06,0.1E+06,0.1E+06,)
BaseIsolator['R_C_BD1'] = (4*STIFF_X,4*STIFF_Y,0.1E+06,0.1E+06,0.1E+06,0.1E+06,)
BaseIsolator['R_R_RBB'] = (2*STIFF_X,2*STIFF_Y,0.1E+06,0.1E+06,0.1E+06,0.1E+06,)
BaseIsolator['R_R_BD6'] = (2*STIFF_X,2*STIFF_Y,0.1E+06,0.1E+06,0.1E+06,0.1E+06,)
BaseIsolator['R_R_BD5'] = (2*STIFF_X,2*STIFF_Y,0.1E+06,0.1E+06,0.1E+06,0.1E+06,)
BaseIsolator['R_R_BD2'] = (2*STIFF_X,2*STIFF_Y,0.1E+06,0.1E+06,0.1E+06,0.1E+06,)
BaseIsolator['R_R_BD1'] = (2*STIFF_X,2*STIFF_Y,0.1E+06,0.1E+06,0.1E+06,0.1E+06,)
BaseIsolator['R_C_BD4'] = (8*STIFF_X,8*STIFF_Y,0.1E+06,0.1E+06,0.1E+06,0.1E+06,)
BaseIsolator['R_C_BRI'] = (8*STIFF_X,8*STIFF_Y,0.1E+06,0.1E+06,0.1E+06,0.1E+06,)
BaseIsolator['R_E_BD4'] = (8*STIFF_X,8*STIFF_Y,0.1E+06,0.1E+06,0.1E+06,0.1E+06,)
BaseIsolator['R_E_BRI'] = (8*STIFF_X,8*STIFF_Y,0.1E+06,0.1E+06,0.1E+06,0.1E+06,)
BaseIsolator['R_C_RBB_Z'] = (0.1E+06,0.1E+06,4*STIFF_Z,0.1E+06,0.1E+06,0.1E+06,)
BaseIsolator['R_C_BD6_Z'] = (0.1E+06,0.1E+06,4*STIFF_Z,0.1E+06,0.1E+06,0.1E+06,)
BaseIsolator['R_C_BD5_Z'] = (0.1E+06,0.1E+06,4*STIFF_Z,0.1E+06,0.1E+06,0.1E+06,)
BaseIsolator['R_C_BD2_Z'] = (0.1E+06,0.1E+06,4*STIFF_Z,0.1E+06,0.1E+06,0.1E+06,)
BaseIsolator['R_C_BD1_Z'] = (0.1E+06,0.1E+06,4*STIFF_Z,0.1E+06,0.1E+06,0.1E+06,)
BaseIsolator['R_R_RBB_Z'] = (0.1E+06,0.1E+06,2*STIFF_Z,0.1E+06,0.1E+06,0.1E+06,)
BaseIsolator['R_R_BD6_Z'] = (0.1E+06,0.1E+06,2*STIFF_Z,0.1E+06,0.1E+06,0.1E+06,)
BaseIsolator['R_R_BD5_Z'] = (0.1E+06,0.1E+06,2*STIFF_Z,0.1E+06,0.1E+06,0.1E+06,)
BaseIsolator['R_R_BD2_Z'] = (0.1E+06,0.1E+06,2*STIFF_Z,0.1E+06,0.1E+06,0.1E+06,)
BaseIsolator['R_R_BD1_Z'] = (0.1E+06,0.1E+06,2*STIFF_Z,0.1E+06,0.1E+06,0.1E+06,)
BaseIsolator['R_C_BD4_Z'] = (0.1E+06,0.1E+06,8*STIFF_Z,0.1E+06,0.1E+06,0.1E+06,)
BaseIsolator['R_C_BRI_Z'] = (0.1E+06,0.1E+06,8*STIFF_Z,0.1E+06,0.1E+06,0.1E+06,)
BaseIsolator['R_E_BD4_Z'] = (0.1E+06,0.1E+06,8*STIFF_Z,0.1E+06,0.1E+06,0.1E+06,)
BaseIsolator['R_E_BRI_Z'] = (0.1E+06,0.1E+06,8*STIFF_Z,0.1E+06,0.1E+06,0.1E+06,)

####################################### DO NOT CHANGE ANYTHING ###############
#Load Datas
with open('GROUPS.pickle', 'rb') as handle:
	GROUPS = pickle.load(handle)
with open('ELEM_GROUPS.pickle', 'rb') as handle:
	ELEM_GROUPS = pickle.load(handle)
with open('NODE_GROUPS.pickle', 'rb') as handle:
    NODE_GROUPS = pickle.load(handle)
with open('MATERIALS.pickle', 'rb') as handle:
    MATERIALS = pickle.load(handle)
with open('Lumped_Mass.pickle', 'rb') as handle:
    Lumped_Mass = pickle.load(handle)
with open('Spring.pickle', 'rb') as handle:
    Spring = pickle.load(handle)
with open('TRUSS.pickle', 'rb') as handle:
    TRUSS = pickle.load(handle)
with open('TRUSS_ELIST.pickle', 'rb') as handle:
    TRUSS_ELIST = pickle.load(handle)
with open('BEAM_SECTIONS.pickle', 'rb') as handle:
    BEAM_SECTIONS = pickle.load(handle)
with open('BEAM_ORIENT.pickle', 'rb') as handle:
    BEAM_ORIENT = pickle.load(handle)
with open('BEAM_WITH_MISSING_ORIENTATION.pickle', 'rb') as handle:
    BEAM_WITH_MISSING_ORIENTATION = pickle.load(handle)
with open('BEAM_MAST_LIST.pickle', 'rb') as handle:
    BEAM_MAST_LIST = pickle.load(handle)
with open('UniquShellGroup.pickle', 'rb') as handle:
    UniquShellGroup = pickle.load(handle)
with open('SHELL_ELEMENT_LIST.pickle', 'rb') as handle:
    SHELL_ELEMENT_LIST = pickle.load(handle)
with open('MPC_Constrains.pickle', 'rb') as handle:
    MPC_Constrains = pickle.load(handle)
with open('LIAISON_SOLIDE.pickle', 'rb') as handle:
    LIAISON_SOLIDE = pickle.load(handle)
with open('LIAISON_ELEM.pickle', 'rb') as handle:
    LIAISON_ELEM = pickle.load(handle)
with open('ELEMENTS.pickle', 'rb') as handle:
    ELEMENTS = pickle.load(handle)
with open('NODES.pickle', 'rb') as handle:
    NODES = pickle.load(handle)
with open('K_T_D_L.pickle', 'rb') as handle:
	K_T_D_L = pickle.load(handle)
with open('K_TR_D_L.pickle', 'rb') as handle:
	K_TR_D_L = pickle.load(handle)

FreeNodes = np.loadtxt('InputsV2/PHASE_3_STAGE_1_INPUT_v2/02_Model/FreeNodes.dat', dtype=int, delimiter=',')

###############################################################################
NEW_ELEM_IDX = max(ELEMENTS.keys()) + 1

### REPLACING ISOLATOR SPRING VALUE WITH ABOVE VALUE
for gid, details in BaseIsolator.items():
	K_TR_D_L[gid]['parameters'] = details

## MPC Constrain To Springs
for id,const in MPC_Constrains.items():
	A = NODE_GROUPS[str(const[0].replace('\'',''))]
	B = NODE_GROUPS[str(const[1].replace('\'',''))]
	grpName = 'Constrains_' + str(const[0].replace('\'',''))
	ELEM_GROUPS[grpName] = []
	for pairs in zip(A,B):
		if grpName == 'BD4_N2':
			print(pairs)
		ELEMENTS[NEW_ELEM_IDX] = {'type':21, 'connectivity':pairs}
		ELEM_GROUPS[grpName].append(NEW_ELEM_IDX)
		NEW_ELEM_IDX = NEW_ELEM_IDX + 1
#### IDENTITYING EDGES FOR CONTRAINS
LIAISON_ELEM_CN = {}
LIAISON_ELEM_CN['BD5_BASE_BROCHETTE'] = 20113
LIAISON_ELEM_CN['BD6_BASE_BROCHETTE'] = 18843
LIAISON_ELEM_CN['BD3_BASE_BROCHETTE'] = 14429
LIAISON_ELEM_CN['BD7_BASE_BROCHETTE'] = 12743
LIAISON_ELEM_CN['BD2_BASE_BROCHETTE'] = 7068
LIAISON_ELEM_CN['BD1_BASE_BROCHETTE'] = 18303
LIAISON_ELEM_CN['BD4_BASE_BROCHETTE'] = 16069
LIAISON_ELEM_modified = []
VALIDATION_STR = ''
abaqus_tri_shell_str = '** This is Auto generated Triangular Shell element details\n*Element, type=S3\n'
abaqus_quad_shell_str = '** This is Auto generated Quadrilateral Shell element details\n*Element, type=S4R\n'
abaqus_beam_str = '** This is Auto generated beam element details\n*Element, type=B31\n'
for i,ccons in enumerate(LIAISON_ELEM):
	grpName = 'Constrains_' + str(ccons[0].replace('\'',''))
	ELEM_GROUPS[grpName] = []
	A,closest_node = extractGroupEdges(NODES,ELEMENTS,\
		ELEM_GROUPS[ccons[0]],NODE_GROUPS[ccons[1]][0])
	LIAISON_ELEM[i].append(A)
	LIAISON_ELEM[i].append(closest_node)
	for eid in ELEM_GROUPS[ccons[0]]:
		nodes = ELEMENTS[eid]['connectivity']
		if len(nodes) == 3:
			abaqus_tri_shell_str = abaqus_tri_shell_str + \
				'{0:d},{1:d},{2:d},{3:d}\n'.format(eid,nodes[0],nodes[1],nodes[2])
		elif len(nodes) == 4:
			abaqus_quad_shell_str = abaqus_quad_shell_str + \
				'{0:d},{1:d},{2:d},{3:d},{4:d}\n'.format(eid,nodes[0],nodes[1],nodes[2],nodes[3])
	for dd in A:
		abaqus_beam_str = abaqus_beam_str + '{0:d},{1:d},{2:d}\n'.format(NEW_ELEM_IDX,\
                                                dd[0],dd[1])
		ELEMENTS[NEW_ELEM_IDX] = {'type':21, 'connectivity':dd}
		ELEM_GROUPS[grpName].append(NEW_ELEM_IDX)
		NEW_ELEM_IDX = NEW_ELEM_IDX + 1
	ELEMENTS[NEW_ELEM_IDX] = {'type':21, 'connectivity':\
		[NODE_GROUPS[str(ccons[1])][0],LIAISON_ELEM_CN[ccons[0]]]}
	ELEM_GROUPS[grpName].append(NEW_ELEM_IDX)
	NEW_ELEM_IDX = NEW_ELEM_IDX + 1
	with open('AERB_MODELS/Abaqus/validation_shells{0:s}.inp'.format(ccons[0]),'w') as f:
		f.write('*include,INPUT=geometry_springs_as_truss.inp\n'+abaqus_beam_str)
#with open('AERB_MODELS/ACS_SASSI/validation_shells.inp','w') as f:
#	f.write(abaqus_tri_shell_str+abaqus_quad_shell_str)
# STICK MODELS
stick_con = np.loadtxt('StickModelConnectivity.dat', dtype=int, delimiter=',')
ELEM_GROUPS['StickModelSpring'] = []
for con in stick_con:
	ELEMENTS[NEW_ELEM_IDX] = {'type':21, 'connectivity':con}
	ELEM_GROUPS['StickModelSpring'].append(NEW_ELEM_IDX)
	NEW_ELEM_IDX = NEW_ELEM_IDX + 1
print()
SASSI_GROUP_IDX = 1
def get_sassi_group_index():
	global SASSI_GROUP_IDX
	SASSI_GROUP_IDX = SASSI_GROUP_IDX + 1
	return SASSI_GROUP_IDX-1

def create_sassi_spring_group(GroupIdentifier,elemGroup,Rindx):
	gid = get_sassi_group_index()
	GROUPS[gid] = {'etype':'SPRING','elements':{}}
	sassi_spring_elment = '* Spring Elements Group {0:s}\n'.format(GroupIdentifier)
	sassi_spring_elment = sassi_spring_elment + \
		'GROUP,{0:d},SPRING\n'.format(gid)
	EL_IDX = 1
	for eid in elemGroup:
		if (ELEMENTS[eid]['connectivity'][0] in FreeNodes) or \
				(ELEMENTS[eid]['connectivity'][1] in FreeNodes):
			continue
		sassi_spring_elment = sassi_spring_elment + \
			'E,{0:d},{1:d},{2:d}\n'.format(EL_IDX,\
			NODE_A2S[ELEMENTS[eid]['connectivity'][0]],\
			NODE_A2S[ELEMENTS[eid]['connectivity'][1]])
		GROUPS[gid]['elements'][eid] = EL_IDX
		EL_IDX = EL_IDX + 1
	if EL_IDX-1 == 0:
		return ''
	sassi_spring_elment = sassi_spring_elment + \
		'RSET,{0:d},{1:d},{2:d},{3:d}\n'.format(1,EL_IDX-1,1,Rindx)
	return sassi_spring_elment

if ABAQUS_MODEL:
    

if SASSI_MODEL:
	NODE_A2S = {}# ABAQUS NODE NUMBERING TO SASSI NODE NUMBERING MAP
	NODE_S2A = {}# SASSI NODE NUMBERING TO ABAQUS NODE NUMBERING MAP
	SASSI_NODE_NO = 1
	SASSI_GROUP_IDX = 1
	############### NODE LIST
	sassi_node_str = DESCLAIMER
	sassi_node_str = sassi_node_str + '* Nodes\n'
	for key, XYZ in NODES.items():
		if key in FreeNodes:
			continue
		sassi_node_str = sassi_node_str + 'N,{0:d},{1:f},{2:f},{3:f}\n'.format(\
			SASSI_NODE_NO,XYZ[0],XYZ[1],XYZ[2])
		NODE_A2S[key] = SASSI_NODE_NO
		NODE_S2A[SASSI_NODE_NO] = key
		SASSI_NODE_NO = SASSI_NODE_NO + 1
	DUMMY_NODE_X = SASSI_NODE_NO
	DUMMY_NODE_Y = SASSI_NODE_NO+1
	DUMMY_NODE_Z = SASSI_NODE_NO+2
	DUMMY_NODE_XYZ = SASSI_NODE_NO+3
	sassi_node_str = sassi_node_str + 'N,{0:d},{1:f},{2:f},{3:f}\n'.format(\
		DUMMY_NODE_X,100000,0,0)
	sassi_node_str = sassi_node_str + 'N,{0:d},{1:f},{2:f},{3:f}\n'.format(\
		DUMMY_NODE_Y,0,100000,0)
	sassi_node_str = sassi_node_str + 'N,{0:d},{1:f},{2:f},{3:f}\n'.format(\
		DUMMY_NODE_Z,0,0,100000)
	sassi_node_str = sassi_node_str + 'N,{0:d},{1:f},{2:f},{3:f}\n'.format(\
		DUMMY_NODE_XYZ,100000,100000,100000)
	with open('AERB_MODELS/ACS_SASSI/cruas_sassi_nodes.pre','w') as f:
		f.write(sassi_node_str)
	############## MAKING MATERIAL LIST
	sassi_mat_str = '* Material Table\n'
	i = 0
	sassi_material_map = {}
	for key, mat in MATERIALS.items():
		sassi_mat_str = sassi_mat_str + \
			'M,{0:d},{1:f},{2:f},{3:f},{4:f},{5:f},{6:d}\n'.format(\
			i+1,mat['E']/1000,mat['NU'],mat['RHO']*9.81/1000,0.05,0.05,1)
		sassi_material_map[key] = i+1
		i = i + 1
	with open('AERB_MODELS/ACS_SASSI/cruas_sassi_materials.pre','w') as f:
		f.write(sassi_mat_str)
	############## MAKING REAL TABLE
	sassi_real_table = '* Real Property Table\n'
	II = 1
	sassi_beam_section_map = {}
	for key, BMS in BEAM_SECTIONS.items():
		para = BMS['parameters']
		sassi_real_table = sassi_real_table  + \
			'* {0:s} type cross section index {1:d}\n'.format(BMS['type'],II)
		if BMS['type'] == 'GENERAL':
			sassi_real_table = sassi_real_table  + \
				'R,{0:d},{1:f},{2:f},{3:f},{4:f},{5:f},{6:f}\n'.format(\
			II,para[0],para[1],para[2],para[3],para[4],para[5])
		else:
			sassi_real_table = sassi_real_table  + \
				'R,{0:d},{1:f},{2:f},{3:f},{4:f},{5:f},{6:f}\n'.format(\
				II,BMS['parameters'][0]*BMS['parameters'][1],\
				(6.0/5.0)*BMS['parameters'][0]*BMS['parameters'][1],\
				(6.0/5.0)*BMS['parameters'][0]*BMS['parameters'][1],\
				BMS['parameters'][0]*BMS['parameters'][1]*(BMS['parameters'][0]**2+BMS['parameters'][1]**2)/12,\
				BMS['parameters'][0]**3*BMS['parameters'][1]/12,\
				BMS['parameters'][1]**3*BMS['parameters'][0]/12)
		sassi_beam_section_map[key] = II
		II = II + 1
	with open('AERB_MODELS/ACS_SASSI/cruas_sassi_sections.pre','w') as f:
		f.write(sassi_real_table)
	###############  TRUSS ELEMENT
	GROUPS[SASSI_GROUP_IDX] = {'etype':'TRUSS','elements':{}}
	SASSI_GROUP_IDX = SASSI_GROUP_IDX + 1
	sassi_truss_real_table = '* TRUSS Real Property Table\n'
	sassi_truss_elment = '* Truss Elements as Beam Elements\n'
	sassi_truss_asignment = ''
	II = 1
	TRS_EL_IDX = 1
	sassi_truss_elment = sassi_truss_elment + 'GROUP,{0:d},BEAMS\n'.format(SASSI_GROUP_IDX)
	for key, TRS in TRUSS.items():
		sassi_truss_real_table = sassi_truss_real_table  + 'R,{0:d},{1:f},0.,0.,0.,0.,0.\n'.format(500+II,key)
		start = TRS_EL_IDX
		for tt in TRS:
			sassi_truss_elment = sassi_truss_elment + \
				'E,{0:d},{1:d},{2:d},{3:d}\n'.format(TRS_EL_IDX,\
				NODE_A2S[ELEMENTS[tt]['connectivity'][0]],\
				NODE_A2S[ELEMENTS[tt]['connectivity'][1]],DUMMY_NODE_XYZ)
			GROUPS[1]['elements'][tt] = TRS_EL_IDX
			end = TRS_EL_IDX
			TRS_EL_IDX = TRS_EL_IDX + 1
		sassi_truss_asignment = sassi_truss_asignment + 'RSET,{0:d},{1:d},{2:d},{3:d}\n'.format(start,end,1,500+II)
		II = II + 1
	sassi_truss_asignment = sassi_truss_asignment + 'MSET,{0:d},{1:d},{2:d},{3:d}\n'.format(1,end,1,sassi_material_map['BRI_1'])
	with open('AERB_MODELS/ACS_SASSI/cruas_sassi_truss.pre','w') as f:
		f.write(sassi_truss_real_table+sassi_truss_elment+sassi_truss_asignment)
	################ 
	########## Spring Element
	SC_TABLE_INDX = 1
	sassi_spring_real_table = '* Spring  Property Table\n'
	sassi_spring_elements = ''
	for gid, details in K_T_D_L.items():
		if gid in BaseIsolator.keys():
			Damp = BaseIsolator_Damp
		else:
			Damp = Structural_Damp
		sassi_spring_real_table = sassi_spring_real_table + \
			'SC,{0:d},{1:f},{2:f},{3:f},0.,0.,0.,{4:f}\n'.format(\
			SC_TABLE_INDX,details['parameters'][0]/1000,details['parameters'][1]/1000,\
			details['parameters'][2]/1000,Damp)
		sassi_spring_elements = sassi_spring_elements + \
			create_sassi_spring_group(gid,ELEM_GROUPS[gid],SC_TABLE_INDX)
		SC_TABLE_INDX = SC_TABLE_INDX + 1
	for gid, details in K_TR_D_L.items():
		if gid in BaseIsolator.keys():
			Damp = BaseIsolator_Damp
		else:
			Damp = Structural_Damp
		sassi_spring_real_table = sassi_spring_real_table + \
			'SC,{0:d},{1:f},{2:f},{3:f},{4:f},{5:f},{6:f},{7:5.3f}\n'.format(\
			SC_TABLE_INDX,details['parameters'][0]/1000,details['parameters'][1]/1000,\
			details['parameters'][2]/1000,details['parameters'][3]/1000,\
			details['parameters'][4]/1000,details['parameters'][5]/1000,Damp)
		sassi_spring_elements = sassi_spring_elements + \
			create_sassi_spring_group(gid,ELEM_GROUPS[gid],SC_TABLE_INDX)
		SC_TABLE_INDX = SC_TABLE_INDX + 1
	with open('AERB_MODELS/ACS_SASSI/cruas_sassi_spring.pre','w') as f:
		f.write(sassi_spring_real_table+sassi_spring_elements)
	######## SHELL
	shell_file_list = []
	SHELL_GROUP_NO = SASSI_GROUP_IDX
	sassi_shell_main = ''
	for key,shells in UniquShellGroup.items():
		for matName, elist in shells['material'].items():
			GROUPS[SHELL_GROUP_NO] = {'etype':'TSHELL','elements':{}}
			sassi_shell_elment = '* Shell Elements Thicknes {0:f} Material {1:s}\n'.format(key,matName)
			sassi_shell_elment = sassi_shell_elment + 'GROUP,{0:d},TSHELL\n'.format(SHELL_GROUP_NO)
			sassi_shell_thickness_asignment = ''
			sassi_shell_material_asignment = ''
			SHELL_EL_IDX = 1
			for eid in elist:
				sassi_shell_elment = sassi_shell_elment + 'E,{0:d},{1:s}\n'.format(SHELL_EL_IDX,\
					','.join([str(NODE_A2S[nnode]) for nnode in  ELEMENTS[eid]['connectivity']]))
				end1 = SHELL_EL_IDX
				GROUPS[SHELL_GROUP_NO]['elements'][SHELL_EL_IDX] = ELEMENTS[eid]['connectivity']
				SHELL_EL_IDX = SHELL_EL_IDX + 1
			sassi_shell_material_asignment = sassi_shell_material_asignment + \
				'MSET,{0:d},{1:d},{2:d},{3:d}\n'.format(1,end1,1,sassi_material_map[matName])
			sassi_shell_thickness_asignment = sassi_shell_thickness_asignment + \
				'THICK,{0:d},{1:d},{2:d},{3:f}\n'.format(1,end1,1,key)
			sassi_shell_main = sassi_shell_main + sassi_shell_elment+sassi_shell_material_asignment+sassi_shell_thickness_asignment
			SHELL_GROUP_NO = SHELL_GROUP_NO + 1
	with open('AERB_MODELS/ACS_SASSI/cruas_sassi_shell_allgroups.pre'.format(SHELL_GROUP_NO),'w') as f:
		f.write(sassi_shell_main)
	SASSI_GROUP_IDX = SHELL_GROUP_NO
	################ TRANSLATIONAL AND ROTATIONAL MASS
	sassi_trans_mass = '* Translational Mass\n'
	for key, inMass in Lumped_Mass.items():
		for nnode in inMass['nSet']:
			if nnode in FreeNodes:
				continue
			sassi_trans_mass = sassi_trans_mass + 'MT,{0:d},{1:f},{1:f},{1:f}\n'.format(\
				NODE_A2S[nnode],inMass['mass'][0]/1000,inMass['mass'][1]/1000,inMass['mass'][2]/1000)
			sassi_trans_mass = sassi_trans_mass + 'MR,{0:d},{1:f},{1:f},{1:f}\n'.format(\
				NODE_A2S[nnode],inMass['mass'][3]/1000,inMass['mass'][4]/1000,inMass['mass'][5]/1000)
	with open('AERB_MODELS/ACS_SASSI/cruas_sassi_trans_mass.pre'.format(SHELL_GROUP_NO),'w') as f:
		f.write(sassi_trans_mass)
	################# BEAMS
	#II = 1
	beams_file_list = []
	BEAM_GROUP_NO = SASSI_GROUP_IDX
	SASSI_BEAMS_THIRD_NODE = {}
	for key, Ornt in BEAM_ORIENT.items():
		for eid in Ornt['elements']:
			third_node = find_node4beam_orientation(NODES,ELEMENTS[eid]['connectivity'][0],ELEMENTS[eid]['connectivity'][1],np.array(Ornt['parameters']))
			if not(third_node):
				print(eid)
			SASSI_BEAMS_THIRD_NODE[eid] = third_node
	for eid in BEAM_WITH_MISSING_ORIENTATION:
		SASSI_BEAMS_THIRD_NODE[eid] = DUMMY_NODE_XYZ
	sassi_beam_elment = ''
	for key, BMS in BEAM_SECTIONS.items():
		for matName, elSet in BMS['material'].items():
			GROUPS[BEAM_GROUP_NO] = {'etype':'BEAMS','elements':{}}
			sassi_beam_elment = sassi_beam_elment + '* Beam Elements for Section {0:s} Material {1:s}\n'.format(key,matName)
			sassi_beam_elment = sassi_beam_elment + 'GROUP,{0:d},BEAMS\n'.format(BEAM_GROUP_NO)
			BEAM_EL_IDX = 1
			for eid in elSet:
				sassi_beam_elment = sassi_beam_elment + 'E,{0:d},{1:d},{2:d},{3:d}\n'.format(BEAM_EL_IDX,\
					NODE_A2S[ELEMENTS[eid]['connectivity'][0]],\
					NODE_A2S[ELEMENTS[eid]['connectivity'][1]],\
					SASSI_BEAMS_THIRD_NODE[eid])
				BEAM_EL_IDX = BEAM_EL_IDX + 1
			sassi_beam_elment = sassi_beam_elment + 'MSET,{0:d},{1:d},{2:d},{3:d}\n'.format(1,BEAM_EL_IDX-1,1,sassi_material_map[matName])
			sassi_beam_elment = sassi_beam_elment + 'RSET,{0:d},{1:d},{2:d},{3:d}\n'.format(1,BEAM_EL_IDX-1,1,sassi_beam_section_map[key])
			BEAM_GROUP_NO = BEAM_GROUP_NO + 1
	with open('AERB_MODELS/ACS_SASSI/cruas_sassi_beams.pre','w') as f:
		f.write(sassi_beam_elment)
	SASSI_GROUP_IDX = BEAM_GROUP_NO
	############# CONSTRAINS - MPC_Constrains
	sassi_constraineqn_spring_real_table = '* Constrain Equation Spring  Property Table\n'
	SCTABLE_X = SC_TABLE_INDX+1
	SCTABLE_Y = SC_TABLE_INDX+2
	SCTABLE_Z = SC_TABLE_INDX+3
	SPRINGSDOF_MAP = [SCTABLE_X,SCTABLE_Y,SCTABLE_Z]
	SCTABLE_XY = SC_TABLE_INDX+4
	SCTABLE_RXYZ = SC_TABLE_INDX+5
	sassi_constraineqn_spring_real_table = sassi_constraineqn_spring_real_table + \
		'SC,{0:d},{1:f},0.0,0.0,0.0,0.0,0.0,0.0\n'.format(SCTABLE_X,RIGIDK)
	sassi_constraineqn_spring_real_table = sassi_constraineqn_spring_real_table + \
		'SC,{0:d},0.0,{1:f},0.0,0.0,0.0,0.0,0.0\n'.format(SCTABLE_Y,RIGIDK)
	sassi_constraineqn_spring_real_table = sassi_constraineqn_spring_real_table + \
		'SC,{0:d},0.0,0.0,{1:f},0.0,0.0,0.0,0.0\n'.format(SCTABLE_Z,RIGIDK)
	sassi_constraineqn_spring_real_table = sassi_constraineqn_spring_real_table + \
		'SC,{0:d},{1:f},{1:f},0.0,0.0,0.0,0.0,0.0\n'.format(SCTABLE_XY,RIGIDK)
	sassi_constraineqn_spring_real_table = sassi_constraineqn_spring_real_table + \
		'SC,{0:d},{1:f},{1:f},{1:f},{1:f},{1:f},{1:f},0.0\n'.format(SCTABLE_RXYZ,RIGIDK)
	sassi_constraineqn_spring_elment = '* Constrains as Springs\n'
	for id,const in MPC_Constrains.items():
		grpName = 'Constrains_' + str(const[0].replace('\'',''))
		sassi_constraineqn_spring_elment = sassi_constraineqn_spring_elment + \
			create_sassi_spring_group(grpName,ELEM_GROUPS[grpName],\
			SPRINGSDOF_MAP[DOF_MAP[str(const[2].replace('\'','')).strip()]-1])
	############# CONSTRAINS - LIAISON_ELEM
	for i,ccons in enumerate(LIAISON_ELEM):
		grpName = 'Constrains_' + str(ccons[0].replace('\'',''))
		sassi_constraineqn_spring_elment = sassi_constraineqn_spring_elment + \
			create_sassi_spring_group(grpName,ELEM_GROUPS[grpName],SCTABLE_RXYZ)
	############# CONSTRAINS - STICK CONNECTIONS
	sassi_constraineqn_spring_elment = sassi_constraineqn_spring_elment + \
		create_sassi_spring_group('StickModelSpring',\
		ELEM_GROUPS['StickModelSpring'],SCTABLE_RXYZ)
	with open('AERB_MODELS/ACS_SASSI/cruas_sassi_constrains.pre','w') as f:
		f.write(sassi_constraineqn_spring_real_table+\
			sassi_constraineqn_spring_elment)
	### WRITE FINAL MAIN FILE
	with open('AERB_MODELS/ACS_SASSI/cruas_sassi_main.pre','w') as f:
		f.write(DESCLAIMER+'* Date/Time: {0:s}\n'.format(\
			strftime("%Y-%m-%d %H:%M:%S", gmtime())))
		f.write('INP,cruas_sassi_nodes.pre\n')
		f.write('INP,cruas_sassi_soil_degraded.pre\n')
		f.write('INP,cruas_sassi_materials.pre\n')
		f.write('INP,cruas_sassi_sections.pre\n')
		f.write('INP,cruas_sassi_truss.pre\n')
		f.write('INP,cruas_sassi_spring.pre\n')
		f.write('INP,cruas_sassi_beams.pre\n')
		f.write('INP,cruas_sassi_shell_allgroups.pre\n')
		f.write('INP,cruas_sassi_trans_mass.pre\n')
		f.write('INP,cruas_sassi_constrains.pre\n')
		f.write('INP,standard_analysis_option.pre\n')
		f.write('MDL,{0:s},{1:s}'.format(SASSI_MODEL_NAME,'E:\SMATCH\SMATCH_v3\SASSI_ANALYSIS'))
	with open('Abaqus2SASSI.csv','w') as f:
		for key,vv in NODE_A2S.items():
			f.write('{0:d},{1:d}\n'.format(key,vv))
	with open('SASSI2Abaqus.csv','w') as f:
		for key,vv in NODE_S2A.items():
			f.write('{0:d},{1:d}\n'.format(key,vv))